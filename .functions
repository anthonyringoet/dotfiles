#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`‚Ä¶";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git‚Äôs colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn‚Äôt break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}‚Ä¶";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function randombytes() {
	local bytes="${1:-100}"
	openssl rand -hex "${bytes}" | pbcopy
}


# Create a new worktree with a branch
function wtcreate() {
    if [ $# -eq 0 ]; then
        echo "Usage: wtcreate <branch_name> [path]"
        echo "Creates a new worktree with branch. Path defaults to ../worktree-<branch_name>"
        return 1
    fi

    local branch_name="$1"
    local worktree_path="${2:-../worktree-$branch_name}"

    echo "Creating worktree: $worktree_path with branch: $branch_name"
    git worktree add -b "$branch_name" "$worktree_path"
}

## Git Worktree Functions
###############################

# Create worktree from existing branch
function wtadd() {
    if [ $# -lt 2 ]; then
        echo "Usage: wtadd <existing_branch> <path>"
        echo "Creates worktree from existing branch"
        return 1
    fi

    local branch_name="$1"
    local worktree_path="$2"

    echo "Adding worktree: $worktree_path for branch: $branch_name"
    git worktree add "$worktree_path" "$branch_name"
}

# List all worktrees
alias wtlist='git worktree list'
alias wtls='git worktree list'

# Remove a worktree
function wtremove() {
    if [ $# -eq 0 ]; then
        echo "Usage: wtremove <worktree_path>"
        echo "Removes the specified worktree"
        return 1
    fi

    local worktree_path="$1"
    echo "Removing worktree: $worktree_path"
    git worktree remove "$worktree_path"
}

# Remove worktree and delete its branch
function wtclean() {
    if [ $# -eq 0 ]; then
        echo "Usage: wtclean <worktree_path>"
        echo "Removes worktree and deletes its branch (if not main/master)"
        return 1
    fi

    local worktree_path="$1"

    # Get the branch name for this worktree
    local branch_name=$(git worktree list | grep "$worktree_path" | awk '{print $3}' | sed 's/\[//' | sed 's/\]//')

    if [[ "$branch_name" == "main" || "$branch_name" == "master" ]]; then
        echo "Cannot delete main/master branch. Only removing worktree."
        git worktree remove "$worktree_path"
        return 0
    fi

    echo "Removing worktree: $worktree_path and deleting branch: $branch_name"
    git worktree remove "$worktree_path"
    git branch -D "$branch_name"
}

# Prune worktrees (clean up deleted worktree references)
alias wtprune='git worktree prune'

# Quick switch to a worktree directory
function wtcd() {
    if [ $# -eq 0 ]; then
        echo "Available worktrees:"
        git worktree list
        return 0
    fi

    local search_term="$1"
    local worktree_path=$(git worktree list | grep "$search_term" | head -1 | awk '{print $1}')

    if [ -n "$worktree_path" ]; then
        echo "Switching to worktree: $worktree_path"
        cd "$worktree_path"
    else
        echo "No worktree found matching: $search_term"
        echo "Available worktrees:"
        git worktree list
    fi
}

# Create multiple agent worktrees with numbered branches
function wtagents() {
    local count="${1:-3}"
    local base_name="${2:-agent}"

    echo "Creating $count agent worktrees..."

    for i in $(seq 1 $count); do
        local branch_name="${base_name}-$i"
        local worktree_path="../worktree-${branch_name}"

        echo "Creating agent worktree $i: $worktree_path"
        git worktree add -b "$branch_name" "$worktree_path"
    done

    echo "‚úÖ Created $count agent worktrees"
    git worktree list
}

# Clean up all agent worktrees
function wtcleanagents() {
    local base_name="${1:-agent}"

    echo "Cleaning up agent worktrees..."

    # Get all worktrees that match the pattern
    git worktree list | grep "worktree-${base_name}" | while read -r line; do
        local worktree_path=$(echo "$line" | awk '{print $1}')
        local branch_name=$(echo "$line" | awk '{print $3}' | sed 's/\[//' | sed 's/\]//')

        echo "Removing worktree: $worktree_path (branch: $branch_name)"
        git worktree remove "$worktree_path"
        git branch -D "$branch_name"
    done

    git worktree prune
    echo "‚úÖ Cleaned up agent worktrees"
}

# Show status of all worktrees
function wtstatus() {
    echo "=== Worktree Status ==="
    git worktree list | while read -r line; do
        local worktree_path=$(echo "$line" | awk '{print $1}')
        local branch_name=$(echo "$line" | awk '{print $3}' | sed 's/\[//' | sed 's/\]//')

        echo ""
        echo "üìÅ $worktree_path ($branch_name)"
        echo "---"
        (cd "$worktree_path" && git status --porcelain | head -5)
    done
}